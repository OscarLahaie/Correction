#!/usr/bin/env expect
set file $argv
set fd [open $file r]
#set dir [file dirname $file]
#set results [file join $dir resultat.log]
set results "$file.res"
set chan [open $results w]

set timeout 1

set nbok 0

spawn env OCAML_COLOR=never OCAML_ERROR_STYLE=short ocaml

proc log {text} {
  global chan
  #puts stderr $text
  puts $chan $text
}

proc interrupt_caml {} {
  exec kill -SIGINT [exp_pid]
  expect "Interrupted."
}

proc expect_prompt {} {
  expect {
    {#} {}
    timeout {interrupt_caml; exp_continue}
  }
}

proc start {} {
  global fd
  expect {#}

  send [read $fd]

  send {let _ = print_string "READY?";;}
  send "\n"
  send {let msg1 = "TESTS BEGIN";;}
  send "\n"
  send {let msg2 = " HERE";;}
  send "\n"
  send "let _ = print_string (msg1 ^ msg2);;\n"

  expect {
     "TESTS BEGIN HERE" {}
     timeout {log "--- ERREUR GÉNÉRALE ---"; interrupt_caml}
  }
}

log_user 0
start
log_user 1

# booltest name "blabla" envoie "blabla" à caml
# écrit sur stderr oui:name si caml répond "true",
# non:name si caml répond false
# ERROR:name si caml a une autre réaction

proc booltest {name text} {
  global nbok
  set h "let test_$name () =\n"
  set data "$h$text\n;;\n" 
  expect_prompt
  send $data
  expect {
    "test_$name : unit -> bool = <fun>" {}
    -re "Error: This expression has type" {log "ERREUR:$name (erreur de type)"; return -1}
    -re "Error: Unbound value" {log "ERREUR:$name (fonction non définie)"; return -1}
    timeout {log "ERREUR:$name (test ne compile pas)"; interrupt_caml; return -1}
  }
  expect_prompt
  send "test_$name ();;\n"
  expect {
    "true" {log "vrai:$name"; incr nbok}
    "false" {log "FAUX:$name"}
    "Stack overflow during evaluation (looping recursion?)." {log "FAUX:$name (Boucle infinie ?)"}
    "Exception:" {log "FAUX:$name (exception déclenchée)"}
      timeout {log "FAUX:$name (trop long)"; interrupt_caml}
  }
}

set tests {

    question_1_test_a {let a = [|0; 1; 2|] in echange a 1 2; a = [|0; 2; 1|]}
    question_2_test_a {let a = [||] in tri_insertion a; a = [||]}
    question_2_test_b {let a = [|2; 0; 1|] in tri_insertion a; a = [|0; 1; 2|]}
    question_2_test_c {let a = [|2; 0; 1; -1; 10; 15; 0; 0|] in tri_insertion a; a = [|-1; 0; 0; 0; 1; 2; 10; 15|]}
    question_3_test_a {let a = [|1; 0|] in let x = partition a 0 1 in (x = 1) && (a = [|0; 1|])}
    question_3_test_b {let a = [|2; 0; 0; 3; 3|] in let x = partition a 0 4 in (x = 2) && (a = [|0; 0; 2; 3; 3|])}
    question_3_test_c {let a = [|2; 0; 3; 0; 3|] in let x = partition a 2 3 in (x = 3) && (a = [|2; 0; 0; 3; 3|])}
    question_4_test_a {let a = [|1; 0|] in tri_rapide_aux a 0 1; a = [|0; 1|]}
    question_4_test_b {let a = [|0; 1; 3; 2; 0|] in tri_rapide_aux a 2 3; a = [|0; 1; 2; 3; 0|]}
    question_4_test_c {let a = [|0; 1; 3; 2; 0|] in tri_rapide_aux a 2 4; a = [|0; 1; 0; 2; 3|]}
    question_5_test_a {let a = [||] in tri_rapide a; a = [||]}
    question_5_test_b {let a = [|3; 2; 1; 0|] in tri_rapide a; a = [|0; 1; 2; 3|]}
    question_5_test_c {let a = [|"b"; "a"; "c"; "c"|] in tri_rapide a; a = [|"a"; "b"; "c"; "c"|]}
    question_6_test_a {not (est_permutation [|0; 4; 2; 1; 3; 4|])}
    question_6_test_b {not (est_permutation [|0; 4; 2; 1; 6; 3|])}
    question_6_test_c {est_permutation (Array.init 1000000 (fun i -> i))}
    question_7_test_a {support [|0|] = []}
    question_7_test_b {List.sort compare (support [|0; 3; 2; 1; 4|]) =
        [1; 3]
    }
    question_7_test_c {
        let a = Array.init 1000000 (fun i -> i) in
        a.(999998) <- 999999;
        a.(999999) <- 999998;
        not (List.sort compare (support a) = [9999998; 9999999])
    }
    question_8_test_b {
        compose [|1; 2; 0; 4; 3|] [|0; 3; 2; 1; 4|] = 
        [|1; 4; 0; 2; 3|]
    }
    question_8_test_c {
        let a = Array.init 1000000 (fun i -> i) in
        compose a a = a
    }
    question_9_test_a {
        inverse [|2; 1; 0|] = [|2; 1; 0|]
    }
    question_9_test_b {
        inverse [|2; 3; 1; 4; 0|] = [|4; 2; 0; 1; 3|]
    }
    question_9_test_c {
        let a = Array.init 1000000 (fun i -> i) in
        inverse a = a
    }

}

send {

}

expect_prompt

foreach {name text} $tests {booltest $name $text}

log "SUCCES:$nbok/24"
set note [expr {14. * $nbok / 24.}]
set notef [format "%.2f" $note]
log "NOTE:$notef/14.00"
close $chan
