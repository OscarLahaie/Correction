#!/usr/bin/env expect
set file $argv
set fd [open $file r]
#set dir [file dirname $file]
#set results [file join $dir resultat.log]
set results "$file.res"
set chan [open $results w]

set timeout 1

set nbok 0
set nbtotal 0

spawn env OCAML_COLOR=never OCAML_ERROR_STYLE=short ocaml

proc log {text} {
  global chan
  #puts stderr $text
  puts $chan $text
}

proc interrupt_caml {} {
  exec kill -SIGINT [exp_pid]
  expect "Interrupted."
}

proc expect_prompt {} {
  expect {
    {#} {}
    timeout {interrupt_caml; exp_continue}
  }
}

proc start {} {
  global fd
  expect {#}

  send [read $fd]

  send {let _ = print_string "READY?";;}
  send "\n"
  send {let msg1 = "TESTS BEGIN";;}
  send "\n"
  send {let msg2 = " HERE";;}
  send "\n"
  send "let _ = print_string (msg1 ^ msg2);;\n"

  expect {
     "TESTS BEGIN HERE" {}
     timeout {log "--- ERREUR GÉNÉRALE ---"; interrupt_caml}
  }
}

log_user 0
start
log_user 1

# booltest name "blabla" envoie "blabla" à caml
# écrit sur stderr oui:name si caml répond "true",
# non:name si caml répond false
# ERROR:name si caml a une autre réaction

proc booltest {name text} {
  global nbok
  global nbtotal
  set h "let test_$name () =\n"
  set data "$h$text\n;;\n" 
  expect_prompt
  send $data
  incr nbtotal
  expect {
    "test_$name : unit -> bool = <fun>" {}
    -re "Error: This expression has type" {log "ERREUR:$name (erreur de type)"; return -1}
    -re "Error: Unbound value" {log "ERREUR:$name (fonction non définie)"; return -1}
    timeout {log "ERREUR:$name (test ne compile pas)"; interrupt_caml; return -1}
  }
  expect_prompt
  send "test_$name ();;\n"
  expect {
    "true" {log "vrai:$name"; incr nbok}
    "false" {log "FAUX:$name"}
    "Stack overflow during evaluation (looping recursion?)." {log "FAUX:$name (Boucle infinie ?)"}
    "Exception:" {log "FAUX:$name (exception déclenchée)"}
      timeout {log "FAUX:$name (trop long)"; interrupt_caml}
  }
}

set tests {

    question_1_test_a {
        let a = ['a'] in
        let b = ['a';'b';'c'] in
        precede a b = false
    }
    question_1_test_b {
        let a = ['m'] in
        let b = ['z'] in
        precede a b = true
    }
    question_1_test_c {
        let a = ['b';'d'] in 
        let b = ['c';'d'] in
        precede a b = true
    }
    question_1_test_d {
        let a = ['c';'d';'e'] in
        let b = ['c';'d';'f'] in
        precede a b = false
    }
    question_2_test_a {
        let mot = ['d';'e'] in
        let mots = [['f'; 'a'; 'i'; 'r'; 'e']; ['o'];['b'; 'r'; 'o'; 'u'; 'i'; 'l'; 'l'; 'e']] in 
        prefixer mot mots = [['d'; 'e'; 'f'; 'a'; 'i'; 'r'; 'e']; ['d'; 'e'; 'o'];['d'; 'e'; 'b'; 'r'; 'o'; 'u'; 'i'; 'l'; 'l'; 'e']]
    }
    question_2_test_b {
        let mot = ['i';'m'] in 
        let mots = [['p'; 'e'; 'r'; 'm'; 'e'; 'a'; 'b'; 'l'; 'e'];['p'; 'o'; 's'; 's'; 'i'; 'b'; 'l'; 'e']; ['u'; 'a'; 'b'; 'l'; 'e']] in
        prefixer mot mots = [['i'; 'm'; 'p'; 'e'; 'r'; 'm'; 'e'; 'a'; 'b'; 'l'; 'e'];
        ['i'; 'm'; 'p'; 'o'; 's'; 's'; 'i'; 'b'; 'l'; 'e'];
        ['i'; 'm'; 'u'; 'a'; 'b'; 'l'; 'e']]
    }
    question_6_creer {
        let mot = ['X'; ' '; 'o'; 'u'; ' '; 'r'; 'i'; 'e'; 'n'; ' '; '!'] in
        creer mot = Noeud (false, [(['X'; ' '; 'o'; 'u'; ' '; 'r'; 'i'; 'e'; 'n'; ' '; '!'], Noeud (true, []))])
    }
    question_6_ex_5 {
        let f arbre = 
        match arbre with
        | Noeud (term1, [((m : mot), Noeud(term2, []))]) ->
        term1 = false && term2 = true
        | _ -> false
        in f ex_5
    }
    question_7_test_a {
        compter ex_0 = 0
    }
    question_7_test_b {
        compter ex_1 = 1
    }
    question_7_test_c {
        compter ex_4 = 6
    }
    question_8_test_a {
        extraire ex_4 = [['a'; 's']; ['f'; 'a']; ['f'; 'a'; 'b'; 'l'; 'e']; ['f'; 'a'; 'c'; 'e'];
        ['f'; 'a'; 'c'; 'i'; 'l'; 'e']; ['l'; 'a']]
    }
    question_8_test_b {
        extraire (Noeud (false, [(['X'; ' '; 'o'; 'u'; ' '; 'r'; 'i'; 'e'; 'n'; ' '; '!'], Noeud (true, []))])) = [['X'; ' '; 'o'; 'u'; ' '; 'r'; 'i'; 'e'; 'n'; ' '; '!']]
    }
    question_9_a {
        valide ex_0 = true
    }
    question_9_b {
        valide ex_1 = true
    }
    question_9_c {
        valide ex_4 = true
    }
    question_9_d {
        valide ( Noeud (false,
            [
                (['f'; 'a'],
                 Noeud (true,
                  [(['b'; 'l'; 'e'], Noeud (true, []));
                   (['c'],
                    Noeud (false,
                     [(['e'], Noeud (true, [])); (['i'; 'l'; 'e'], Noeud (true, []));
                      (['t'; 'e'; 'u'; 'r'], Noeud (true, []))]))]));
                (['a'; 's'], Noeud (true, []));
             (['l'; 'a'], Noeud (true, []))])) = false
    }
    question_9_e {
        valide (
            Noeud (false, [(['b'], ex_1); (['a'], ex_1)])
        ) = false
    }
    question_10_a {
        accepter ['l'; 'a'] ex_4 = true
    }
    question_10_b {
        accepter ['a'; 's'] ex_4 = true
    }
    question_10_c {
        accepter ['f'; 'a'; 'b'; 'l'; 'e'] ex_4 = true
    }
    question_10_d {
        accepter ['f'; 'a'; 'b'; 'l'] ex_4 = false
    }
    question_10_e {
        accepter ['f'; 'a'; 'c'] ex_4 = false
    }
    question_12_test_a {
        ajouter ['f'; 'a'; 'c'; 't'; 'e'; 'u'; 'r'] ex_4 = Noeud (false,
            [(['a'; 's'], Noeud (true, []));
             (['f'; 'a'],
              Noeud (true,
               [(['b'; 'l'; 'e'], Noeud (true, []));
                (['c'],
                 Noeud (false,
                  [(['e'], Noeud (true, [])); (['i'; 'l'; 'e'], Noeud (true, []));
                   (['t'; 'e'; 'u'; 'r'], Noeud (true, []))]))]));
             (['l'; 'a'], Noeud (true, []))])
    }
    question_12_test_b {
        ajouter ['l'; 'a'; 'm'; 'p'; 'e'] ex_4 = Noeud (false,
            [(['a'; 's'], Noeud (true, []));
             (['f'; 'a'],
              Noeud (true,
               [(['b'; 'l'; 'e'], Noeud (true, []));
                (['c'],
                 Noeud (false,
                  [(['e'], Noeud (true, [])); (['i'; 'l'; 'e'], Noeud (true, []))]))]));
             (['l'; 'a'], Noeud (true, [(['m'; 'p'; 'e'], Noeud (true, []))]))])
    }
    question_12_test_c {
        ajouter ['l'; 'a'; 'm'; 'e'] ex_4 = 
        Noeud (false,
            [(['a'; 's'], Noeud (true, []));
             (['f'; 'a'],
              Noeud (true,
               [(['b'; 'l'; 'e'], Noeud (true, []));
                (['c'],
                 Noeud (false,
                  [(['e'], Noeud (true, [])); (['i'; 'l'; 'e'], Noeud (true, []))]))]));
             (['l'; 'a'], Noeud (true, [(['m'; 'e'], Noeud (true, []))]))])
    }
    question_12_test_final {
        ex_4
        |> ajouter ['l'; 'a'; 'm'; 'e'] 
        |> ajouter ['l'; 'a'; 'm'; 'p'; 'e'] 
        |> ajouter ['f'; 'a'; 'c'; 't'; 'e'; 'u'; 'r']
        = Noeud (false,
            [(['a'; 's'], Noeud (true, []));
             (['f'; 'a'],
              Noeud (true,
               [(['b'; 'l'; 'e'], Noeud (true, []));
                (['c'],
                 Noeud (false,
                  [(['e'], Noeud (true, [])); (['i'; 'l'; 'e'], Noeud (true, []));
                   (['t'; 'e'; 'u'; 'r'], Noeud (true, []))]))]));
             (['l'; 'a'],
              Noeud (true,
               [(['m'],
                 Noeud (false,
                  [(['e'], Noeud (true, [])); (['p'; 'e'], Noeud (true, []))]))]))])
    }
    question_13_a {
        fusion ex_4 (Noeud (false,
            [(['a'; 's'], Noeud (true, []));
             (['f'; 'a'],
              Noeud (true,
               [(['b'; 'l'; 'e'], Noeud (true, []));
                (['c'],
                 Noeud (false,
                  [(['e'], Noeud (true, [])); (['i'; 'l'; 'e'], Noeud (true, []));
                   (['t'; 'e'; 'u'; 'r'], Noeud (true, []))]))]));
             (['l'; 'a'],
              Noeud (true,
               [(['m'],
                 Noeud (false,
                  [(['e'], Noeud (true, [])); (['p'; 'e'], Noeud (true, []))]))]))])) = 
                  (Noeud (false,
                    [(['a'; 's'], Noeud (true, []));
                     (['f'; 'a'],
                      Noeud (true,
                       [(['b'; 'l'; 'e'], Noeud (true, []));
                        (['c'],
                         Noeud (false,
                          [(['e'], Noeud (true, [])); (['i'; 'l'; 'e'], Noeud (true, []));
                           (['t'; 'e'; 'u'; 'r'], Noeud (true, []))]))]));
                     (['l'; 'a'],
                      Noeud (true,
                       [(['m'],
                         Noeud (false,
                          [(['e'], Noeud (true, [])); (['p'; 'e'], Noeud (true, []))]))]))]))
    }
    question_13_b {
        let arbre = Noeud (false , [(['p'; 'r'; 'e'; 'p'; 'a'], ex_1)]) in
        fusion arbre ex_4 = Noeud (false,
            [(['a'; 's'], Noeud (true, []));
             (['f'; 'a'],
              Noeud (true,
               [(['b'; 'l'; 'e'], Noeud (true, []));
                (['c'],
                 Noeud (false,
                  [(['e'], Noeud (true, [])); (['i'; 'l'; 'e'], Noeud (true, []))]))]));
             (['l'; 'a'], Noeud (true, []));
             (['p'; 'r'; 'e'; 'p'; 'a'], Noeud (true, []))])
    }
    question_13_c {
        let arbre = Noeud (false, [(['a'; 'b'], Noeud (true, [(['c'; 'd'], Noeud (true, []))]))]) in
        fusion ex_4 arbre = Noeud (false,
            [(['a'],
              Noeud (false,
               [(['b'], Noeud (true, [(['c'; 'd'], Noeud (true, []))]));
                (['s'], Noeud (true, []))]));
             (['f'; 'a'],
              Noeud (true,
               [(['b'; 'l'; 'e'], Noeud (true, []));
                (['c'],
                 Noeud (false,
                  [(['e'], Noeud (true, [])); (['i'; 'l'; 'e'], Noeud (true, []))]))]));
             (['l'; 'a'], Noeud (true, []))])
    }
}

send {

}

expect_prompt

foreach {name text} $tests {booltest $name $text}

log "SUCCES:$nbok/$nbtotal"
close $chan
